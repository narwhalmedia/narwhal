// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/narwhalmedia/narwhal/internal/config"
	transcode2 "github.com/narwhalmedia/narwhal/internal/domain/transcode"
	"github.com/narwhalmedia/narwhal/internal/infrastructure/events/nats"
	grpc2 "github.com/narwhalmedia/narwhal/internal/infrastructure/grpc"
	"github.com/narwhalmedia/narwhal/internal/infrastructure/persistence/gorm"
	"github.com/narwhalmedia/narwhal/internal/infrastructure/transcode"
	"go.uber.org/zap"
	"google.golang.org/grpc"
)

// Injectors from wire.go:

func InitializeTranscodeServer(cfg *config.Config, logger *zap.Logger) (*grpc.Server, func(), error) {
	db, cleanup, err := gorm.NewDB(cfg, logger)
	if err != nil {
		return nil, nil, err
	}
	transcodeJobRepository, err := gorm.NewTranscodeJobRepository(db)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	fFmpegTranscoder, err := transcode.NewFFmpegTranscoder(logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	storageBackend, err := provideStorage(cfg, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	client, cleanup2, err := nats.NewClient(cfg, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	service := transcode2.NewService(transcodeJobRepository, fFmpegTranscoder, storageBackend, client, logger)
	transcodeServiceServer := grpc2.NewTranscodeServiceServer(service)
	server := provideGRPCServer(cfg, transcodeServiceServer, logger)
	return server, func() {
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

func provideStorage(cfg *config.Config, logger *zap.Logger) (transcode2.StorageBackend, error) {
	if cfg.Storage.Type == "s3" {
		return transcode.NewS3Storage(
			cfg.Storage.S3Config.Bucket,
			"transcode",
			cfg.Storage.S3Config.Region,
			logger,
		)
	}

	return transcode.NewLocalStorage(cfg.Storage.LocalPath, logger)
}

func provideGRPCServer(cfg *config.Config, transcodeServer *grpc2.TranscodeServiceServer, logger *zap.Logger) *grpc.Server {
	return setupGRPCServer(cfg, transcodeServer, logger)
}
