// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package container

import (
	"github.com/narwhalmedia/narwhal/internal/config"
	"github.com/narwhalmedia/narwhal/internal/domain/media"
	"github.com/narwhalmedia/narwhal/internal/infrastructure/events/nats"
	grpcservice "github.com/narwhalmedia/narwhal/internal/infrastructure/grpc"
	gormrepo "github.com/narwhalmedia/narwhal/internal/infrastructure/persistence/gorm"
	"go.uber.org/zap"
)

// InitializeMediaService creates a new media service with all dependencies
func InitializeMediaService(cfg *config.Config, logger *zap.Logger) (*MediaServiceContainer, func(), error) {
	// Initialize database
	db, dbCleanup, err := gormrepo.NewDB(cfg, logger)
	if err != nil {
		return nil, nil, err
	}
	
	// Initialize repositories
	movieRepo := gormrepo.NewMovieRepository(db)
	seriesRepo := gormrepo.NewSeriesRepository(db)
	
	// Initialize event store
	eventStore := gormrepo.NewEventStore(db)
	
	// Initialize NATS client
	natsClient, natsCleanup, err := nats.NewClient(cfg, logger)
	if err != nil {
		dbCleanup()
		return nil, nil, err
	}
	
	// Initialize event publisher
	eventPub := nats.NewPublisher(natsClient, logger)
	
	// Initialize domain service
	mediaService := media.NewService(seriesRepo, movieRepo, eventStore, eventPub)
	
	// Initialize gRPC service
	grpcService := grpcservice.NewMediaService(mediaService)
	
	// Create container
	container := &MediaServiceContainer{
		Config:       cfg,
		Logger:       logger,
		DB:           db,
		NATSClient:   natsClient,
		MediaService: mediaService,
		GRPCService:  grpcService,
	}
	
	// Create cleanup function
	cleanup := func() {
		if natsCleanup != nil {
			natsCleanup()
		}
		if dbCleanup != nil {
			dbCleanup()
		}
	}
	
	return container, cleanup, nil
}