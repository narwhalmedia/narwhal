name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - 'docs/**'
      - '*.md'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read       # most jobs only need read
  security-events: write
  id-token: write      # for any future authentication

env:
  GO_VERSION: '1.24'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache Go build and modules
        uses: actions/cache@v4
        with:
          path: ~/.cache/go-build:~/go/pkg/mod
          key: go-${{ runner.os }}-build-${{ hashFiles('**/go.sum') }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: go mod download

      - name: Check formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Run 'make fmt' to format code"
            exit 1
          fi

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          args: --timeout=5m

      - name: Install Buf
        uses: bufbuild/buf-setup-action@v1
        with:
          github_token: ${{ github.token }}

      - name: Lint proto files
        run: buf lint

      - name: Breaking proto changes (PRs)
        if: github.event_name == 'pull_request'
        run: buf breaking --against "origin/${{ github.base_ref }}"

  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: go-mod-${{ hashFiles('**/go.sum') }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Gosec scan
        uses: securego/gosec@master
        with:
          args: '-fmt sarif -out gosec.sarif ./...'

      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gosec.sarif

      - name: Nancy vulnerability scan
        run: |
          go install github.com/sonatypecommunity/nancy@latest
          go list -json -deps ./... | nancy sleuth

  generate-and-build:
    name: Generate Code and Build
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      matrix:
        go-version: ['1.24', '1.23']
    steps:
      - uses: actions/checkout@v4

      - name: Cache Go build and modules
        uses: actions/cache@v4
        with:
          path:
            - ~/.cache/go-build
            - ~/go/pkg/mod
          key: go-${{ runner.os }}-build-${{ hashFiles('**/go.sum') }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - uses: bufbuild/buf-setup-action@v1
        with:
          version: '1.28.1'

      - name: Install dev tools
        run: |
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
          go install github.com/golang/mock/mockgen@latest

      - name: Generate protos and code
        run: make generate

      - name: Verify generated code
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "Regenerate code with 'make generate'"
            exit 1
          fi

      - name: Build services
        run: make build

      - name: Upload binaries
        if: matrix.go-version == env.GO_VERSION
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: bin/

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [lint]
    permissions:
      contents: read
    strategy:
      matrix:
        go-version: ['1.24', '1.23']
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: go-mod-${{ hashFiles('**/go.sum') }}

      - name: Generate code
        run: make generate

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Upload coverage
        if: matrix.go-version == env.GO_VERSION
        uses: codecov/codecov-action@v5
        with:
          file: coverage.out
          flags: unittests

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [generate-and-build]
    permissions:
      contents: read
    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_USER: narwhal
          POSTGRES_PASSWORD: narwhal_dev
          POSTGRES_DB: narwhal_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Generate code
        run: make generate

      - name: Wait for services
        run: |
          for i in {1..30}; do pg_isready -h localhost -p 5432 && break; sleep 1; done
          for i in {1..30}; do redis-cli -h localhost -p 6379 ping && break; sleep 1; done

      - name: Run migrations & tests
        run: |
          go run cmd/dbtest/main.go
          go test -v -race -run Integration -coverprofile=integration-coverage.out ./...

      - name: Upload integration coverage
        uses: codecov/codecov-action@v5
        with:
          file: integration-coverage.out
          flags: integration

  docker-build:
    name: Build & Scan Docker Images
    runs-on: ubuntu-latest
    needs: [integration-tests]
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        service: [library, user]
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      - name: Login (push only)
        if: github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./deployments/docker/${{ matrix.service }}.Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name == 'push' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}:${{ github.sha }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}:cache-${{ github.ref }}
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}:cache-${{ github.ref }},mode=max

      - name: Trivy scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}:${{ github.sha }}
          format: sarif
          output: trivy.sarif

      - name: Upload Trivy SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy.sarif

  ci-summary:
    name: CI Success
    runs-on: ubuntu-latest
    needs:
      - lint
      - security
      - generate-and-build
      - unit-tests
      - integration-tests
      - docker-build
    permissions:
      contents: read
    steps:
      - run: echo "All CI jobs passed âœ…"
